generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    extensions        = [uuid_ossp(map: "uuid-ossp")]
}

model categories {
    id         Int        @id @default(autoincrement())
    name       String     @db.VarChar(255)
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
    user_id    String?    @db.Uuid
    users      users?     @relation(fields: [user_id], references: [id], onUpdate: SetNull)
    expenses   expenses[]

    @@index([name])
}

model sourcepayments {
    id         Int        @id @default(autoincrement())
    name       String     @db.VarChar(255)
    type       String     @db.VarChar(255)
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
    user_id    String?    @db.Uuid
    expenses   expenses[]
    users      users?     @relation(fields: [user_id], references: [id], onUpdate: SetNull)

    @@index([name, type])
}

model stores {
    id         Int        @id @default(autoincrement())
    name       String     @db.VarChar(255)
    address    String?    @db.VarChar(255)
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
    user_id    String?    @db.Uuid
    expenses   expenses[]
    users      users?     @relation(fields: [user_id], references: [id], onUpdate: SetNull)

    @@index([name, address])
}

model profiles {
    id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    first_name String   @db.VarChar(255)
    last_name  String   @db.VarChar(255)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    user_id    String   @db.Uuid
    users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
    id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    username       String           @unique @db.VarChar(255)
    email          String           @unique @db.VarChar(255)
    password_hash  String?          @db.VarChar(255)
    source         String?          @default("email") @db.VarChar(255)
    external_id    String?          @db.VarChar(255)
    created_at     DateTime         @default(now())
    updated_at     DateTime         @updatedAt
    categories     categories[]
    expenses       expenses[]
    profiles       profiles[]
    sourcepayments sourcepayments[]
    stores         stores[]

    @@index([username, email])
}

model expenses {
    id                Int              @id @default(autoincrement())
    category_id       Int
    user_id           String           @db.Uuid
    store_id          Int
    source_payment_id Int
    total             Decimal          @db.Decimal(10, 2)
    expense_date      DateTime         @db.Date
    receipt_image     Bytes?
    created_at        DateTime         @default(now())
    updated_at        DateTime         @updatedAt
    expensedetails    expensedetails[]
    categories        categories       @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    sourcepayments    sourcepayments   @relation(fields: [source_payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    stores            stores           @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users             users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
    expensesplits     expensesplits[]

    @@index([user_id, category_id, source_payment_id, store_id, expense_date(sort: Desc)])
}

model expensedetails {
    id         Int      @id @default(autoincrement())
    type       String   @db.VarChar(255)
    detail     String?  @db.VarChar(255)
    amount     Decimal  @db.Decimal(10, 2)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    expense_id Int
    expenses   expenses @relation(fields: [expense_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@index([expense_id, type])
}

model expensesplits {
    id           Int      @id @default(autoincrement())
    split_amount Decimal  @db.Decimal(10, 2)
    expense_id   Int
    expenses     expenses @relation(fields: [expense_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@index([expense_id])
}
