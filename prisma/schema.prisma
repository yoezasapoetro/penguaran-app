generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    extensions        = [uuid_ossp(map: "uuid-ossp")]
}

model Category {
    id         Int       @id @default(autoincrement())
    name       String    @db.VarChar(255)
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    user_id    String?   @db.Uuid
    users      User?     @relation(fields: [user_id], references: [id], onUpdate: SetNull, onDelete: SetNull)
    expenses   Expense[]

    @@index([name])
}

model SourcePayment {
    id         Int       @id @default(autoincrement())
    name       String    @db.VarChar(255)
    type       String    @db.VarChar(255)
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    user_id    String?   @db.Uuid
    expenses   Expense[]
    users      User?     @relation(fields: [user_id], references: [id], onUpdate: SetNull, onDelete: SetNull)

    @@index([name, type])
}

model Store {
    id         Int       @id @default(autoincrement())
    name       String    @db.VarChar(255)
    address    String?   @db.VarChar(255)
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    user_id    String?   @db.Uuid
    expenses   Expense[]
    users      User?     @relation(fields: [user_id], references: [id], onUpdate: SetNull, onDelete: SetNull)

    @@index([name, address])
}

model Profile {
    id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    first_name String   @db.VarChar(255)
    last_name  String   @db.VarChar(255)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    user_id    String   @db.Uuid
    users      User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model User {
    id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    username       String          @unique @db.VarChar(255)
    email          String          @unique @db.VarChar(255)
    password_hash  String?         @db.VarChar(255)
    source         String?         @default("email") @db.VarChar(255)
    external_id    String?         @db.VarChar(255)
    created_at     DateTime        @default(now())
    updated_at     DateTime        @updatedAt
    categories     Category[]
    expenses       Expense[]
    profiles       Profile[]
    sourcepayments SourcePayment[]
    stores         Store[]

    @@index([username, email])
}

model Expense {
    id                Int              @id @default(autoincrement())
    category_id       Int
    user_id           String           @db.Uuid
    store_id          Int
    source_payment_id Int
    total             Decimal          @db.Decimal(10, 2)
    expense_date      DateTime         @db.Date
    receipt_image     Bytes?
    created_at        DateTime         @default(now())
    updated_at        DateTime         @updatedAt
    expensedetails    ExpenseDetails[]
    categories        Category         @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    sourcepayments    SourcePayment    @relation(fields: [source_payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    stores            Store            @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users             User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    expensesplits     ExpenseSplits[]

    @@index([user_id, category_id, source_payment_id, store_id, expense_date(sort: Desc)])
}

model ExpenseDetails {
    id         Int      @id @default(autoincrement())
    type       String   @db.VarChar(255)
    detail     String?  @db.VarChar(255)
    amount     Decimal  @db.Decimal(10, 2)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    expense_id Int
    expenses   Expense  @relation(fields: [expense_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@index([expense_id, type])
}

model ExpenseSplits {
    id           Int     @id @default(autoincrement())
    split_amount Decimal @db.Decimal(10, 2)
    expense_id   Int
    expenses     Expense @relation(fields: [expense_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([expense_id])
}
